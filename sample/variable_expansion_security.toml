# Security-Focused Variable Expansion Examples
# This file demonstrates security features including allowlist and Command.Env priority
version = "1.0"

[global]
timeout = 30
workdir = "/tmp"
log_level = "info"
skip_standard_paths = true
# Global allowlist: only these system environment variables can be used
env_allowlist = [
    "PATH",
    "HOME",
    "USER",
    "LANG",
    "TZ",
]

# Example 1: Command.Env takes priority over system environment
[[groups]]
name = "command_env_priority"
description = "Demonstrate Command.Env priority over system variables"

[[groups.commands]]
name = "override_home"
description = "Command.Env HOME overrides system HOME"
cmd = "/bin/echo"
args = ["Home directory: ${HOME}"]
# This local HOME definition takes priority over system $HOME
env = ["HOME=/opt/custom-home"]

[[groups.commands]]
name = "override_user"
description = "Command.Env USER overrides system USER"
cmd = "/bin/echo"
args = ["Current user: ${USER}"]
# This local USER definition takes priority over system $USER
env = ["USER=serviceaccount"]

# Example 2: Using variables not in allowlist (via Command.Env)
[[groups]]
name = "local_vars_no_allowlist"
description = "Command.Env variables don't need to be in allowlist"

[[groups.commands]]
name = "custom_vars"
description = "Use custom variables defined in Command.Env"
cmd = "${MY_TOOL}"
args = ["--config", "${MY_CONFIG}", "--data", "${MY_DATA}"]
# MY_TOOL, MY_CONFIG, MY_DATA are not in global allowlist,
# but they can be used because they're defined in Command.Env
env = [
    "MY_TOOL=/opt/myapp/tool",
    "MY_CONFIG=/etc/myapp/config.yml",
    "MY_DATA=/var/myapp/data"
]

# Example 3: Security with absolute paths
[[groups]]
name = "absolute_path_requirement"
description = "Commands must resolve to absolute paths"

[[groups.commands]]
name = "secure_command_path"
description = "Command path is absolute after expansion"
cmd = "${SECURE_BIN}"
args = ["--version"]
# Must use absolute path to pass security validation
env = ["SECURE_BIN=/usr/local/bin/mytool"]

# Example 4: No shell interpretation - literal argument passing
[[groups]]
name = "no_shell_interpretation"
description = "Arguments are passed literally without shell interpretation"

[[groups.commands]]
name = "literal_glob_pattern"
description = "Glob patterns are passed as literal strings, not expanded by shell"
cmd = "/bin/echo"
args = ["Files matching pattern: ${PATTERN}"]
# The *.txt pattern is passed as a literal string to echo,
# not expanded by a shell (which would list all .txt files)
env = ["PATTERN=*.txt"]

# Example 5: Combining allowlist and Command.Env
[[groups]]
name = "mixed_sources"
description = "Use both allowlisted system vars and Command.Env vars"

[[groups.commands]]
name = "mixed_variables"
description = "Combine system and local variables"
cmd = "/bin/bash"
args = ["-c", "echo User ${USER} in ${HOME}, app at ${APP_DIR}"]
# USER and HOME come from system (via allowlist)
# APP_DIR is local to this command
env = ["APP_DIR=/opt/application"]

# Example 6: Sensitive data in Command.Env
[[groups]]
name = "sensitive_data"
description = "Keep sensitive data in Command.Env, not system environment"

[[groups.commands]]
name = "api_call_with_token"
description = "Use API token from Command.Env"
cmd = "/usr/bin/curl"
args = [
    "-H", "Authorization: Bearer ${API_TOKEN}",
    "-H", "Content-Type: application/json",
    "${API_ENDPOINT}/data"
]
# Sensitive values like API_TOKEN are kept in Command.Env
# and not exposed to the system environment
env = [
    "API_TOKEN=sk-1234567890abcdef",
    "API_ENDPOINT=https://api.example.com"
]

# Example 7: Isolation between commands
[[groups]]
name = "command_isolation"
description = "Each command has isolated environment variables"

[[groups.commands]]
name = "isolated_cmd_1"
description = "First command with its own DB_HOST"
cmd = "/bin/echo"
args = ["Connecting to ${DB_HOST}"]
env = ["DB_HOST=db1.example.com"]

[[groups.commands]]
name = "isolated_cmd_2"
description = "Second command with different DB_HOST"
cmd = "/bin/echo"
args = ["Connecting to ${DB_HOST}"]
# This DB_HOST is independent of the previous command
env = ["DB_HOST=db2.example.com"]

# Example 8: Preventing path traversal
[[groups]]
name = "path_security"
description = "Safe handling of file paths with variables"

[[groups.commands]]
name = "safe_file_access"
description = "Access files within allowed directory"
cmd = "/bin/cat"
args = ["${DATA_DIR}/${FILENAME}"]
# Construct paths safely with validated components
env = [
    "DATA_DIR=/var/app/data",
    "FILENAME=config.json"
]

# Example 9: Multi-layer security with nested variables
[[groups]]
name = "nested_security"
description = "Nested variables with security controls"

[[groups.commands]]
name = "secure_nested"
description = "Nested variables with Command.Env priority"
cmd = "/bin/echo"
args = ["Full path: ${FULL_PATH}"]
# All components are defined in Command.Env for maximum control
env = [
    "FULL_PATH=${BASE}/${SUBDIR}/${FILE}",
    "BASE=/opt/secure",
    "SUBDIR=configs",
    "FILE=app.yml"
]

# Example 10: Audit trail with variables
[[groups]]
name = "audit_logging"
description = "Use variables for audit and logging"

[[groups.commands]]
name = "logged_operation"
description = "Operation with audit context in variables"
cmd = "/opt/tools/audit-wrapper"
args = [
    "--user", "${AUDIT_USER}",
    "--action", "${AUDIT_ACTION}",
    "--timestamp", "${AUDIT_TIME}",
    "--command", "${TARGET_CMD}"
]
env = [
    "AUDIT_USER=admin",
    "AUDIT_ACTION=config-update",
    "AUDIT_TIME=2025-10-01T12:00:00Z",
    "TARGET_CMD=/usr/local/bin/config-tool"
]
