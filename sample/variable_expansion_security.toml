# Security-Focused Variable Expansion Examples
# This file demonstrates security features including allowlist and vars/env separation
version = "1.0"

[global]
timeout = 30
log_level = "info"
skip_standard_paths = true
# Global allowlist: only these system environment variables can be used
env_allowlist = [
    "PATH",
    "HOME",
    "USER",
    "LANG",
    "TZ",
]

# Example 1: Internal variables vs. process environment variables
[[groups]]
name = "vars_env_separation"
description = "Demonstrate internal variables vs. process environment variables"

[[groups.commands]]
name = "internal_var_only"
description = "Use internal variable (not passed to child process)"
cmd = "/bin/echo"
args = ["Tool path: %{tool_path}"]
vars = ["tool_path=/opt/tools/mytool"]
# tool_path is only used for TOML expansion, not passed to child process

[[groups.commands]]
name = "env_var_to_child"
description = "Pass environment variable to child process"
cmd = "/bin/sh"
args = ["-c", "echo HOME from env: $HOME"]
vars = []
from_env = ["home=HOME"]
env = ["HOME=%{home}"]
# HOME is explicitly passed to child process via env

# Example 2: Using system environment variables with from_env
[[groups]]
name = "from_env_usage"
description = "Safe system environment variable import"

[[groups.commands]]
name = "use_system_home"
description = "Import and use system HOME variable"
cmd = "/bin/echo"
args = ["Home directory: %{home}"]
from_env = ["home=HOME"]  # Import HOME as internal variable 'home'

[[groups.commands]]
name = "use_system_user"
description = "Import and use system USER variable"
cmd = "/bin/echo"
args = ["Current user: %{username}"]
from_env = ["username=USER"]  # Import USER as internal variable 'username'

# Example 3: Absolute path requirement
[[groups]]
name = "absolute_path_requirement"
description = "Commands must resolve to absolute paths"

[[groups.commands]]
name = "secure_command_path"
description = "Command path is absolute after expansion"
cmd = "%{secure_bin}"
args = ["--version"]
vars = ["secure_bin=/usr/local/bin/mytool"]  # Must use absolute path

# Example 4: No shell interpretation - literal argument passing
[[groups]]
name = "no_shell_interpretation"
description = "Arguments are passed literally without shell interpretation"

[[groups.commands]]
name = "literal_glob_pattern"
description = "Glob patterns are passed as literal strings, not expanded by shell"
cmd = "/bin/echo"
args = ["Files matching pattern: %{pattern}"]
vars = ["pattern=*.txt"]
# The *.txt pattern is passed as a literal string to echo,
# not expanded by a shell (which would list all .txt files)

# Example 5: Combining from_env and vars
[[groups]]
name = "mixed_sources"
description = "Use both system environment variables and internal variables"

[[groups.commands]]
name = "mixed_variables"
description = "Combine system and internal variables"
cmd = "/bin/sh"
args = ["-c", "echo User %{username} in %{home}, app at %{app_dir}"]
from_env = [
    "username=USER",
    "home=HOME"
]
vars = ["app_dir=/opt/application"]
# username and home come from system (via from_env)
# app_dir is internal variable

# Example 6: Sensitive data in internal variables
[[groups]]
name = "sensitive_data"
description = "Keep sensitive data in internal variables"

[[groups.commands]]
name = "api_call_with_token"
description = "Use API token from internal variable"
cmd = "/usr/bin/curl"
args = [
    "-H", "Authorization: Bearer %{api_token}",
    "-H", "Content-Type: application/json",
    "%{api_endpoint}/data"
]
vars = [
    "api_token=sk-1234567890abcdef",
    "api_endpoint=https://api.example.com"
]
# api_token and api_endpoint are internal variables only,
# not passed to child process environment

# Example 7: Explicit environment variable passing
[[groups]]
name = "explicit_env_passing"
description = "Explicitly pass internal variables as environment variables"

[[groups.commands]]
name = "pass_to_env"
description = "Pass internal variable to child process environment"
cmd = "/bin/sh"
args = ["-c", "echo Config file: $CONFIG_FILE"]
vars = ["config_path=/etc/myapp/config.yml"]
env = ["CONFIG_FILE=%{config_path}"]
# config_path is internal variable used in TOML expansion
# CONFIG_FILE is environment variable passed to child process

# Example 8: Isolation between commands
[[groups]]
name = "command_isolation"
description = "Each command has isolated internal variables"

[[groups.commands]]
name = "isolated_cmd_1"
description = "First command with its own DB_HOST"
cmd = "/bin/echo"
args = ["Connecting to %{db_host}"]
vars = ["db_host=db1.example.com"]

[[groups.commands]]
name = "isolated_cmd_2"
description = "Second command with different DB_HOST"
cmd = "/bin/echo"
args = ["Connecting to %{db_host}"]
vars = ["db_host=db2.example.com"]
# This db_host is independent of the previous command

# Example 9: Preventing path traversal
[[groups]]
name = "path_security"
description = "Safe handling of file paths with variables"

[[groups.commands]]
name = "safe_file_access"
description = "Access files within allowed directory"
cmd = "/bin/cat"
args = ["%{data_dir}/%{filename}"]
vars = [
    "data_dir=/var/app/data",
    "filename=config.json"
]
# Construct paths safely with validated components

# Example 10: Nested internal variables
[[groups]]
name = "nested_security"
description = "Nested internal variables with security controls"

[[groups.commands]]
name = "secure_nested"
description = "Nested variables for controlled path construction"
cmd = "/bin/echo"
args = ["Full path: %{full_path}"]
vars = [
    "base=/opt/secure",
    "subdir=configs",
    "file=app.yml",
    "full_path=%{base}/%{subdir}/%{file}"
]
# All components are internal variables for maximum control

# Example 11: PATH extension example
[[groups]]
name = "path_extension"
description = "Safely extend PATH using from_env"

[[groups.commands]]
name = "extend_path"
description = "Extend system PATH with custom directories"
cmd = "/bin/sh"
args = ["-c", "echo Extended PATH: $PATH"]
from_env = ["system_path=PATH"]
env = ["PATH=/opt/custom/bin:%{system_path}"]
# Import system PATH, then extend it for child process

# Example 12: Allowlist violation prevention
# Note: The following would cause errors if uncommented:

# [[groups]]
# name = "allowlist_error_example"
# [[groups.commands]]
# name = "not_in_allowlist"
# cmd = "/bin/echo"
# args = ["%{secret}"]
# from_env = ["secret=SECRET_VAR"]  # Error: SECRET_VAR not in allowlist
