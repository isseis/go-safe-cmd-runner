# E2E Test for vars/env separation (Task 0033)
# This sample demonstrates the new variable system:
# - env_import: Import system environment variables as internal variables
# - vars: Define internal variables (can reference other internal variables)
# - %{VAR}: Internal variable expansion syntax
# - env_vars: Define process environment variables (can reference internal variables)

[global]
# Whitelist of system environment variables that can be imported
env_allowed = ["HOME", "USER", "PATH"]

# Import system environment variables as internal variables
# Format: "internal_name=SYSTEM_VAR"
env_import = [
    "home=HOME",
    "user=USER",
    "system_path=PATH"
]

# Define internal variables (TOML expansion only, not process env vars)
vars = [
    "app_name=test_app",
    "app_dir=%{home}/%{app_name}",
    "data_dir=%{app_dir}/data",
    "log_dir=%{app_dir}/logs"
]

# Define process environment variables (visible to child processes)
env_vars = [
    "APP_DIR=%{app_dir}",
    "APP_NAME=%{app_name}",
    "CUSTOM_PATH=/usr/local/bin:/usr/bin"
]

# Commands to hash-verify before execution (disabled for E2E test)
# verify_files = [
#     "/usr/bin/printenv",
#     "/bin/echo"
# ]

[[groups]]
name = "test_group"

# Inherit env_import from Global (because env_import is not defined here)
# Inherited variables: home, user, system_path

# Group-level internal variables
vars = [
    "input_file=%{data_dir}/input.txt",
    "output_file=%{data_dir}/output.txt",
    "temp_dir=%{data_dir}/temp"
]

# Group-level process environment variables
env_vars = [
    "DATA_DIR=%{data_dir}",
    "LOG_DIR=%{log_dir}"
]

# Test 1: Print all environment variables to verify they are set correctly
[[groups.commands]]
name = "print_all_env"
cmd = "/usr/bin/printenv"
args = []
env_vars = []  # Use inherited env from group and global
mode = "user"

# Test 2: Print specific environment variables
[[groups.commands]]
name = "print_app_dir"
cmd = "/usr/bin/printenv"
args = ["APP_DIR"]
mode = "user"

[[groups.commands]]
name = "print_app_name"
cmd = "/usr/bin/printenv"
args = ["APP_NAME"]
mode = "user"

[[groups.commands]]
name = "print_data_dir"
cmd = "/usr/bin/printenv"
args = ["DATA_DIR"]
mode = "user"

[[groups.commands]]
name = "print_log_dir"
cmd = "/usr/bin/printenv"
args = ["LOG_DIR"]
mode = "user"

# Test 3: Use internal variables in args
[[groups.commands]]
name = "echo_internal_vars"
cmd = "/bin/echo"
args = [
    "app_dir=%{app_dir}",
    "data_dir=%{data_dir}",
    "input_file=%{input_file}",
    "output_file=%{output_file}"
]
mode = "user"

# Test 4: Command-level variables
[[groups.commands]]
name = "command_level_vars"
vars = [
    "cmd_var=%{temp_dir}/command_specific.log"
]
cmd = "/bin/echo"
args = [
    "cmd_var=%{cmd_var}",
    "temp_dir=%{temp_dir}"
]
env_vars = [
    "CMD_VAR=%{cmd_var}"
]
mode = "user"

# Test 5: Verify environment variable priority
# Command.env should override Group.env and Global.env
[[groups.commands]]
name = "env_priority_test"
cmd = "/usr/bin/printenv"
args = ["APP_NAME"]
env_vars = [
    "APP_NAME=command_override"
]
mode = "user"

[[groups]]
name = "override_group"

# Override env_import (Global.env_import is ignored)
env_allowed = ["USER", "PATH"]
env_import = [
    "user=USER",
    "path=PATH"
]

# This group does NOT have access to %{home} because env_import is overridden
vars = [
    "group_specific=/opt/override_app",
    "config=%{group_specific}/config"
]

env_vars = [
    "GROUP_SPECIFIC=%{group_specific}",
    "CONFIG_DIR=%{config}"
]

[[groups.commands]]
name = "override_test"
cmd = "/bin/echo"
args = [
    "user=%{user}",
    "path=%{path}",
    "group_specific=%{group_specific}"
]
env_vars = []
mode = "user"

[[groups]]
name = "empty_env_import_group"

# Explicitly disable env_import (no system env vars imported)
env_import = []

vars = [
    "static_var=/static/path"
]

env_vars = [
    "STATIC_VAR=%{static_var}"
]

[[groups.commands]]
name = "static_test"
cmd = "/bin/echo"
args = [
    "static_var=%{static_var}"
]
mode = "user"
