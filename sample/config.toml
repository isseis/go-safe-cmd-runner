# Configuration file for go-safe-cmd-runner
# This file demonstrates all available configuration options
#
# Usage examples:
#   # Basic execution
#   go run cmd/runner/main.go -config sample/config.toml
#
#   # With environment variables
#   TEST_SUITE="integration" DEPLOY_ENV="staging" go run cmd/runner/main.go -config sample/config.toml

# Version identifier for the configuration format
version = "1.0"

# Global configuration settings
[global]
# Global timeout for all commands in seconds (default: 600)
timeout = 120

# Working directory for command execution (must be absolute path)
workdir = "/tmp/cmd-runner"

# Log level: debug, info, warn, error (default: info)
log_level = "info"

# Global environment variable allowlist (optional)
env_allowlist = [
  "PATH",
  "HOME",
  "USER",
  "TEST_SUITE",
  "DEPLOY_ENV",
  "CUSTOM_VAR",
  "TEST_ENV",
  "TIMEOUT",
  "CLEANUP_MODE",
]

# Command groups define collections of related commands
# Groups are executed in priority order, with dependencies resolved first

[[groups]]
name = "setup"
description = "Initial setup and preparation with temporary directory"
priority = 1                                                           # Execution priority (lower numbers run first)
depends_on = []                                                        # Dependencies on other groups
temp_dir = true                                                        # Create temporary directory for this group
cleanup = true                                                         # Auto-cleanup temporary resources after group execution

# Commands within this group
[[groups.commands]]
name = "create_workspace"
description = "Create workspace directories"
cmd = "mkdir"
args = [
  "-p",
  "myapp-dev",
  "logs",
  "tmp",
] # Direct values instead of template variables
timeout = 30 # Command-specific timeout (overrides global)

[[groups.commands]]
name = "show_environment"
description = "Display environment information"
cmd = "echo"
args = ["Environment: development, App: myapp-dev, Port: 3000"]
env = ["CUSTOM_VAR=setup_value"]                                # Command-specific environment variables

[[groups]]
name = "build"
description = "Build and compilation with custom working directory"
priority = 2
depends_on = ["setup"]                                              # This group depends on 'setup' group completion
workdir = "/tmp/build-workspace"                                    # Custom working directory for this group

[[groups.commands]]
name = "build_start"
description = "Start build process"
cmd = "echo"
args = ["Starting build for myapp-dev..."]

[[groups.commands]]
name = "create_build_dirs"
description = "Create build directories"
cmd = "mkdir"
args = ["-p", "build/myapp-dev", "dist"]
timeout = 45

[[groups]]
name = "test"
description = "Testing and validation"
priority = 3
depends_on = ["build"]
# Uses global working directory as no specific workdir or temp_dir is set

[[groups.commands]]
name = "run_tests"
description = "Execute test suite"
cmd = "echo"
args = [
  "Running tests with external var: ${TEST_SUITE}",
] # ${VAR} syntax for runtime env vars
env = ["TEST_ENV=ci", "TIMEOUT=300"]
timeout = 60

[[groups.commands]]
name = "check_system"
description = "System information check"
cmd = "uname"
args = ["-a"]

[[groups]]
name = "deploy"
description = "Deployment operations with temporary directory and cleanup"
priority = 4
depends_on = ["test"]
temp_dir = true                                                            # Create temporary directory for deployment
cleanup = true                                                             # Auto-cleanup after deployment

[[groups.commands]]
name = "prepare_deploy"
description = "Prepare deployment"
cmd = "echo"
args = ["Deploying myapp-prod to production on port 8080"]

[[groups.commands]]
name = "copy_artifacts"
description = "Copy build artifacts"
cmd = "cp"
args = ["-r", "build/", "deploy/"]
timeout = 90

[[groups]]
name = "cleanup"
description = "Cleanup and maintenance"
priority = 5
depends_on = ["deploy"]
workdir = "/tmp"                        # Use /tmp for cleanup operations

[[groups.commands]]
name = "cleanup_temp"
description = "Remove temporary files"
cmd = "echo"
args = ["Cleaning up temporary files for ${DEPLOY_ENV:-default} environment"]
env = ["CLEANUP_MODE=safe"]

[[groups.commands]]
name = "final_status"
description = "Display final status"
cmd = "echo"
args = ["Pipeline completed successfully!"]
