# Simple E2E test for vars/env separation
# Tests the new variable system without file verification

[global]
env_allowlist = ["HOME", "USER", "PATH"]
skip_standard_paths = true

# Import system environment variables as internal variables
from_env = [
    "home=HOME",
    "user=USER"
]

# Define internal variables
vars = [
    "app_name=test_app",
    "app_dir=%{home}/%{app_name}"
]

# Define process environment variables
env = [
    "APP_DIR=%{app_dir}",
    "APP_NAME=%{app_name}"
]

[[groups]]
name = "test_group"

vars = [
    "log_file=%{app_dir}/test.log"
]

env = [
    "LOG_FILE=%{log_file}"
]

# Test: Print environment variables
[[groups.commands]]
name = "print_env"
cmd = "/usr/bin/printenv"
args = []
mode = "user"

# Test: Print specific environment variables
[[groups.commands]]
name = "print_app_dir"
cmd = "/usr/bin/printenv"
args = ["APP_DIR"]
mode = "user"

[[groups.commands]]
name = "print_app_name"
cmd = "/usr/bin/printenv"
args = ["APP_NAME"]
mode = "user"

[[groups.commands]]
name = "print_log_file"
cmd = "/usr/bin/printenv"
args = ["LOG_FILE"]
mode = "user"

# Test: Echo with internal variables in args
[[groups.commands]]
name = "echo_vars"
cmd = "/bin/echo"
args = ["app_dir=%{app_dir}", "log_file=%{log_file}"]
mode = "user"

# Test: Command-level variables
[[groups.commands]]
name = "cmd_vars"
vars = ["temp=%{log_file}.tmp"]
cmd = "/bin/echo"
args = ["temp=%{temp}"]
env = ["TEMP=%{temp}"]
mode = "user"

# Test: Verify TEMP environment variable is set
[[groups.commands]]
name = "print_temp"
vars = ["temp=%{log_file}.tmp"]
cmd = "/usr/bin/printenv"
args = ["TEMP"]
env = ["TEMP=%{temp}"]
mode = "user"

# Test: Environment variable priority (Command > Group > Global)
[[groups.commands]]
name = "priority_test"
cmd = "/usr/bin/printenv"
args = ["APP_NAME"]
env = ["APP_NAME=command_override"]
mode = "user"
