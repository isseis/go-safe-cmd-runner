# Global and Group Environment Variables - Advanced Example
#
# This sample demonstrates advanced features including:
# - Allowlist inheritance, override, and rejection modes
# - Complex variable references within vars and env definitions
# - Command-level vars and env override
# - Multiple groups with different configurations
# - Internal variables (vars, from_env) vs. process environment variables (env)

version = "1.0"

[global]
# Global internal variables for TOML expansion
vars = [
    "app_root=/opt/myapp",
    "env_type=production",
    "log_level=info",               # Default log level
    "log_dir=%{app_root}/logs",
    "data_dir=%{app_root}/data",
]

# Import system PATH and extend it
from_env = ["system_path=PATH"]
env = ["PATH=/opt/tools/bin:%{system_path}"]  # Extend PATH for child processes

# Global allowlist: allows PATH, HOME, and USER from system
env_allowlist = ["PATH", "HOME", "USER"]

skip_standard_paths = true

# Group 1: Inherit mode (default)
# This group inherits global.env_allowlist and global.from_env
[[groups]]
name = "inherit_example"
description = "Demonstrates allowlist and from_env inheritance"

# Note: env_allowlist and from_env are not specified, so they inherit from global

vars = [
    "group_var=inherit_group",
    "app_dir=%{app_root}/inherit",   # References global.vars
    "config=%{app_dir}/config.yaml", # References group.vars (app_dir)
]

[[groups.commands]]
name = "show_inherited"
description = "Show inherited allowlist and from_env behavior"
cmd = "/bin/echo"
args = [
    "Group: %{group_var}",
    "App directory: %{app_dir}",
]
# Can also use global.from_env variables if needed

# Group 2: Override mode (explicit allowlist and from_env)
# This group overrides global.env_allowlist and global.from_env with its own
[[groups]]
name = "override_example"
description = "Demonstrates allowlist and from_env override"

# Override global allowlist - only HOSTNAME and CUSTOM_VAR are allowed from system
env_allowlist = ["HOSTNAME", "CUSTOM_VAR"]

# Override global from_env
from_env = ["hostname=HOSTNAME"]  # Different from global.from_env

vars = [
    "group_var=override_group",
    "app_dir=%{app_root}/override",  # Can still reference global.vars variables
    "log_file=%{log_dir}/override.log",
]

[[groups.commands]]
name = "show_overridden"
description = "Show overridden allowlist and from_env behavior"
cmd = "/bin/echo"
args = [
    "Group: %{group_var}",
    "App directory: %{app_dir}",
    "Hostname: %{hostname}",  # From group.from_env
    # Note: Cannot use global.from_env variables (e.g., system_path) here
]

# Group 3: Reject mode (empty allowlist)
# This group rejects all system environment variables
[[groups]]
name = "reject_example"
description = "Demonstrates allowlist rejection (empty env_allowlist)"

# Empty allowlist - reject all system environment variables
env_allowlist = []
from_env = []  # No system env imports

vars = [
    "group_var=reject_group",
    "app_dir=%{app_root}/reject",    # Can still reference global.vars
    "isolated=true",                 # Group-specific variable
]

[[groups.commands]]
name = "show_rejected"
description = "Show rejected allowlist behavior"
cmd = "/bin/echo"
args = [
    "Group: %{group_var}",
    "App directory: %{app_dir}",
    "Isolated: %{isolated}",
    # Note: Any system env variable reference would cause an error here
]

# Group 4: Complex variable references
# Demonstrates hierarchical variable references
[[groups]]
name = "complex_references"
description = "Demonstrates complex variable reference patterns"

vars = [
    "service_name=myservice",
    "service_dir=%{app_root}/services/%{service_name}",
    "bin_dir=%{service_dir}/bin",
    "lib_dir=%{service_dir}/lib",
    "conf_dir=%{service_dir}/etc",
    "run_dir=%{service_dir}/run",
]

[[groups.commands]]
name = "show_paths"
description = "Display all configured paths"
cmd = "/bin/echo"
args = [
    "Service: %{service_name}",
    "Binary directory: %{bin_dir}",
    "Library directory: %{lib_dir}",
    "Config directory: %{conf_dir}",
    "Runtime directory: %{run_dir}",
]

# Group 5: Command-level override
# Demonstrates command.vars and command.env overriding group.vars and group.env
[[groups]]
name = "command_override"
description = "Demonstrates command-level vars and env override"

vars = [
    "level=group",
    "group_only=group_value",
    "config_dir=%{app_root}/config",
]

[[groups.commands]]
name = "use_group_vars"
description = "Use group-level internal variables"
cmd = "/bin/echo"
args = ["Level: %{level}, Config: %{config_dir}"]
# level will be "group"

[[groups.commands]]
name = "override_at_command"
description = "Override group.vars at command level"
cmd = "/bin/echo"
args = [
    "Level: %{level}",
    "Group only: %{group_only}",
    "Command only: %{command_only}",
]
vars = [
    "level=command",           # Overrides group.vars
    "command_only=cmd_value",  # Command-specific variable
]
# level will be "command"

# Group 6: Multi-environment setup
# Demonstrates how different groups can represent different environments
[[groups]]
name = "development"
description = "Development environment configuration"

vars = [
    "env_type=development",    # Override global.vars
    "db_host=localhost",
    "db_port=5432",
    "log_level=debug",         # Override global.vars (info -> debug)
    "debug_mode=true",
]

[[groups.commands]]
name = "show_dev_env"
description = "Show development environment"
cmd = "/bin/echo"
args = [
    "Environment: %{env_type}",
    "Database: %{db_host}:%{db_port}",
    "Log level: %{log_level}",    # Will show "debug" (overridden)
    "Debug: %{debug_mode}",
]

[[groups]]
name = "production"
description = "Production environment configuration"

vars = [
    "env_type=production",     # Keep global.vars value (explicit)
    "db_host=prod-db.example.com",
    "db_port=5432",
    "log_level=info",          # Explicitly set to same value as global.vars
    "debug_mode=false",
]

[[groups.commands]]
name = "show_prod_env"
description = "Show production environment"
cmd = "/bin/echo"
args = [
    "Environment: %{env_type}",
    "Database: %{db_host}:%{db_port}",
    "Log level: %{log_level}",    # Will show "info" (same as global)
    "Debug: %{debug_mode}",
]

# Group 7: Demonstrating env usage for child processes
[[groups]]
name = "env_demonstration"
description = "Show difference between vars (internal) and env (process)"

vars = [
    "internal_var=only_for_toml",
    "app_name=myapp",
]

# Pass specific internal variables to child process as environment variables
env = [
    "APP_NAME=%{app_name}",  # Internal var to child process env
    "APP_ROOT=%{app_root}",  # Global internal var to child process env
]

[[groups.commands]]
name = "show_env_vs_vars"
description = "Show difference between internal variables and process env"
cmd = "/bin/sh"
args = [
    "-c",
    "echo Internal (TOML only): %{internal_var}; echo Process env APP_NAME: $APP_NAME; echo Process env APP_ROOT: $APP_ROOT"
]
# internal_var is used in TOML expansion but NOT passed to child process
# APP_NAME and APP_ROOT are passed to child process via env
